version: '3.8'

services:
  # PostgreSQL with backup
  postgres:
    image: postgres:16-alpine
    container_name: agentic-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-agentic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-agentic_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-agentic}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - agentic-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: agentic-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - agentic-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.11.0
    container_name: agentic-qdrant-prod
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - agentic-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Backend API with security hardening
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agentic-backend-prod
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-agentic}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-agentic_db}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Qdrant
      QDRANT_URL: http://qdrant:6333
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # LLM Providers
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Vault (optional)
      VAULT_ENABLED: ${VAULT_ENABLED:-false}
      VAULT_ADDR: ${VAULT_ADDR:-http://vault:8200}
      VAULT_TOKEN: ${VAULT_TOKEN}
      
      # Telemetry
      OTLP_ENDPOINT: ${OTLP_ENDPOINT:-http://tempo:4317}
      TRACING_ENABLED: ${TRACING_ENABLED:-true}
      
      # Environment
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agentic-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false
    user: "1001:1001"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # PostgreSQL backup service
  postgres-backup:
    image: postgres:16-alpine
    container_name: agentic-postgres-backup
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${POSTGRES_USER:-agentic}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-agentic_db}
      BACKUP_DIR: /backups
      S3_BUCKET: ${S3_BACKUP_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./backups/postgres:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        apk add --no-cache aws-cli &&
        while true; do
          echo 'Starting backup at' $$(date);
          pg_dump -Fc -f /backups/backup_$$(date +%Y%m%d_%H%M%S).dump;
          echo 'Backup completed';
          if [ ! -z '$$S3_BUCKET' ]; then
            aws s3 cp /backups/backup_$$(date +%Y%m%d_%H%M%S).dump s3://$$S3_BUCKET/postgres/;
            echo 'Backup uploaded to S3';
          fi;
          find /backups -name '*.dump' -mtime +7 -delete;
          echo 'Old backups cleaned up';
          sleep 86400;
        done
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - agentic-network

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: agentic-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    restart: unless-stopped
    networks:
      - agentic-network
    profiles:
      - monitoring

  # Grafana Tempo for traces (alternative to Jaeger)
  tempo:
    image: grafana/tempo:latest
    container_name: agentic-tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"   # Tempo
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    restart: unless-stopped
    networks:
      - agentic-network
    profiles:
      - monitoring

  # HashiCorp Vault for secrets management (optional)
  vault:
    image: vault:1.15
    container_name: agentic-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
    restart: unless-stopped
    networks:
      - agentic-network
    profiles:
      - security

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  tempo_data:
    driver: local
  vault_data:
    driver: local

networks:
  agentic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

